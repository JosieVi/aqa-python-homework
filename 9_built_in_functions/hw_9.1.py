# TODO: 9.1 Выражения-генераторы

# Подвиг 1. Запишите выражение для генератора, который бы возвращал целые числа от 2 по 10 000 (включительно) с шагом 1 (то есть, 2, 3, 4, ..., 10 000). Присвойте этот генератор переменной gen.
# Вызывать генератор и отображать что-либо на экране не нужно, только задать его.

gen = (i for i in range(2, 10001, 1))


# Подвиг 2. На вход программе поступают два целых числа a и b (a < b), записанные в одну строчку через пробел. На их основе запишите генератор для формирования квадратов чисел в диапазоне [a; b] (включительно, квадратные скобки об этом говорят).
# Преобразуйте этот генератор в кортеж чисел (без использования операторов циклов) и присвойте эту коллекцию переменной tp.
# P. S. На экране ничего отображать не нужно, только создать кортеж на основе генератора.

a, b = map(int, input().split())
tp = tuple(i ** 2 for i in range(a, b + 1))


# Подвиг 3. На вход программе поступают два целых числа a и b (a < b), записанные в одну строчку через пробел. Определите генератор, который бы выдавал модули целых чисел из диапазона [a; b] (включительно). В цикле выведите первые пять значений этого генератора. Каждое значение с новой строки. (Гарантируется, что пять значений имеются).
# Sample Input:
# -3 3
# Sample Output:
# 3
# 2
# 1
# 0
# 1

a, b = map(int, input().split())
gen = (abs(i) for i in range(a, b + 1))
for i in range(5):
    print(next(gen))


# Подвиг 6. На вход программе подается целое положительное число a. Необходимо его прочитать и объявить генератор, который бы возвращал модули чисел в диапазоне [-a; a] (включительно), а затем еще один генератор, который бы вычислял кубы чисел (возведение в степень 3), возвращаемых первым генератором.
# Вывести в одну строчку через пробел первые четыре значения. (Гарантируется, что генератор выдает, как минимум четыре значения).
# Sample Input:
# 3
# Sample Output:
# 27 8 1 0

a = int(input())
gen1 = (abs(i) for i in range(-a, a + 1))
gen2 = (i ** 3 for i in gen1)
for i in range(4):
    print(next(gen2), end=' ')


# Подвиг 7. Используя символы малых букв латинского алфавита (строка ascii_lowercase):
# from string import ascii_lowercase              
# запишите генератор, который бы возвращал все возможные сочетания из двух букв латинского алфавита. Выведите первые 50 сочетаний на экран в строку через пробел.
# Например, первые семь начальных сочетаний имеют вид:
# aa ab ac ad ae af ag

import math
from string import ascii_lowercase
gen = (i + j for i in ascii_lowercase for j in ascii_lowercase)
for i in range(50):
    print(next(gen), end=' ')


# Подвиг 8. Объявите в программе следующий список из названий городов:
# cities = ["Москва", "Ульяновск", "Самара", "Уфа", "Омск", "Тула"]
# Затем, необходимо объявить генератор, который бы используя этот список, выдавал 1 000 000 наименований городов по циклу. То есть, дойдя до конца списка, возвращался в начало и повторял перебор. И так, для выдачи миллиона названий. Вывести на экран первые 20 наименований городов с помощью генератора в одну строчку через пробел.

cities = ["Москва", "Ульяновск", "Самара", "Уфа", "Омск", "Тула"]
gen = (i for i in cities * 1000000)
for i in range(20):
    print(next(gen), end=' ')


# Подвиг 9. Необходимо объявить генератор, который бы выдавал значения функции f(x) = 0.5 * pow(x, 2) - 2.0 для аргумента x в диапазоне [a; b] (включительно) с шагом 0.01. Целые числа a, b (a < b) подаются на вход программе в одну строчку через пробел. Нужно их прочитать и через генератор вывести на экран первые 20 значений функции с точностью до сотых.
# Sample Input:
# 0 10
# Sample Output:
# -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -1.99 -1.99 -1.99 -1.99 -1.99 -1.99 -1.99 -1.98 -1.98

import math
a, b = map(int, input().split())
gen = (0.5 * pow(x / 100, 2) - 2.0 for x in range(a * 100, b * 100 + 1))
for i in range(20):
    print(round(next(gen), 2), end=' ')