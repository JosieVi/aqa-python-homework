# TODO: 9.6 Сортировка с помощью sort и sorted

# Подвиг 2. На вход программе поступают целые числа, записанные через пробел. Прочитайте эту строку с числами и преобразуйте ее сначала в список из целых чисел, а затем список в кортеж из целых чисел. То есть, в программе будет две разные коллекции: список и кортеж. Отсортируйте по возрастанию значений эти коллекции методом sort, если это возможно, а иначе - примените функцию sorted.
# На экран ничего выводить не нужно, только сформировать две отсортированные коллекции: lst (список) - результат сортировки списка; tp_lst (кортеж) - результат сортировки кортежа.
# P. S. На результаты сортировок обязательно должны ссылаться переменные с именами lst и tp_lst!

import numbers


s = input()

lst = list(map(int, s.split()))
tpl_unsorted = tuple(lst)

lst.sort()
tp_lst = tuple(sorted(tpl_unsorted))


# Подвиг 3. Объявите в программе функцию со следующей сигнатурой:
# def get_sort(d): ...           
# На входе этой функции (в параметре d) ожидается словарь формата (пример):
# d = {'cat': 'кот', 'horse': 'лошадь', 'tree': 'дерево', 'dog': 'собака', 'book': 'книга'}         
# Функция должна выполнить сортировку ключей словаря d по убыванию (лексикографическая сортировка строк) и возвратить список из соответствующих значений ключей словаря. Сам словарь d при этом должен оставаться неизменным. Например, для указанного словаря d, результатом работы функции должен быть список:
# ['дерево', 'лошадь', 'собака', 'кот', 'книга']
# В программе нужно реализовать только функцию get_sort, вызывать ее не нужно и что-либо выводить на экран.
# Подсказка: список в функции get_sort лучше всего формировать с помощью генератора списков.

def get_sort(d):
    sorted_keys = sorted(d.keys(), reverse=True)
    return [d[key] for key in sorted_keys]


# Подвиг 4. На вход программе поступают целые числа, записанных через пробел. Необходимо их прочитать и выбрать из них четыре наибольших уникальных значения. Результат вывести на экран в порядке их убывания в одну строчку через пробел.
# Sample Input:
# 10 5 4 -3 2 0 5 10 3
# Sample Output:
# 10 5 4 3

numbers = list(map(int, input().split()))
unique_numbers = set(numbers)

print(*sorted(unique_numbers, reverse=True)[:4])


# Подвиг 5. На вход программе поступают две последовательности целых чисел (каждая с новой строки). Длины последовательностей могут быть разными. Необходимо их прочитать и сохранить в отдельных списках или кортежах. Затем, первый список отсортировать по возрастанию, а второй - по убыванию. Полученные пары из обоих списков сложить друг с другом и получить новый список чисел. Результат вывести на экран в виде строки чисел через пробел.
# Sample Input:
# 7 6 4 2 6 7 9 10 4
# -4 5 10 4 5 65
# Sample Output:
# 67 14 9 11 10 3

num1 = list(map(int, input().split()))
num2 = list(map(int, input().split()))

num1_sorted = sorted(num1)
num2_sorted = sorted(num2, reverse=True)

result = [a + b for a, b in zip(num1_sorted, num2_sorted)]

print(*result)


# Подвиг 6. На вход программе поступает список товаров в виде строк формата:
# название_1:цена_1
# ...
# название_N:цена_N
# В программе уже реализовано считывание всех этих строк и сохранение в списке lst_in:
# lst_in = list(map(str.strip, sys.stdin.readlines()))            
# Необходимо преобразовать этот список в словарь, ключами которого выступают цены (целые числа), а значениями - соответствующие названия товаров. Также необходимо написать функцию, которая бы принимала на входе словарь указанного формата и возвращала список из наименований трех наиболее дешевых товаров.
# Вызовите эту функцию и отобразите на экране полученный список в порядке возрастания цены в одну строчку через пробел.
# Sample Input:
# смартфон:120000
# яблоко:2
# сумка:560
# брюки:2500
# линейка:10
# бумага:500
# Sample Output:
# яблоко линейка бумага

import sys
lst_in = list(map(str.strip, sys.stdin.readlines()))

products = dict()
for el in lst_in:
    name, price = el.split(':')
    products[int(price)] = name

def get_cheapest_products(d):
    sorted_items = sorted(d.items())
    return [item[1] for item in sorted_items[:3]]

cheapest_products = get_cheapest_products(products)
print(*cheapest_products)