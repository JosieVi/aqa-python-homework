# TODO: 9.2 Функция-генератор. Оператор yield

# Подвиг 1. На вход программе подается натуральное число N. Оно уже читается в программе командой:
# N = int(input())               
# Объявите в программе функцию-генератор с именем get_sum с сигнатурой:
# def get_sum(total): ...              
# которая бы возвращала текущую сумму чисел последовательности длины total = N в диапазоне целых чисел [1; N] (включительно). То есть, при вызове get_sum в качестве аргумента передается переменная N. В результате должны получить следующие результаты работы функции-генератора:
# при первом вызове get_sum возвращает сумму 1;
# при втором вызове get_sum возвращает сумму чисел 1+2 = 3;
# при третьем вызове get_sum возвращает сумму чисел 1+2+3 = 6;
# ....
# для N-го вызова get_sum возвращает сумму 1+2+...+(N−1)+N.
# Реализовать функцию-генератор get_sum без использования коллекций. Вызывать ее не нужно, только объявить.
# Sample Input:
# 5
# Sample Output:
# 1 3 6 10 15

N = int(input())

def get_sum(total):
    sum = 0
    for i in range(1, total + 1):
        sum += i
        yield sum


# Подвиг 2. Мы с вами в заданиях несколько раз генерировали последовательность чисел Фибоначчи, которая строится по правилу: каждое последующее число равно сумме двух предыдущих. Для разнообразия давайте будем генерировать каждое последующее как сумму трех предыдущих чисел. При этом первые три числа равны 1. Получаем такую последовательность:
# 1, 1, 1, 3, 5, 9, 17, 31, 57, ...
# Не знаю, есть ли у нее название, поэтому, в рамках уроков, я скромно назову ее последовательностью Балакирева. 
# Итак, на вход программе поступает натуральное число N (N > 5), которое необходимо прочитать и сохранить в переменной. Затем (или в начале программы), объявить функцию-генератор с сигнатурой:
# def balak_seq(max_len): ...        
# которая бы возвращала max_len = N первых чисел последовательности Балакирева (включая первые три единицы).
# Реализуйте эту функцию без использования коллекций (списков, кортежей, словарей и т.п.). Вызовите ее N раз для получения N чисел и выведите полученные числа на экран в одну строчку через пробел.
# Sample Input:
# 7
# Sample Output:
# 1 1 1 3 5 9 17

N = int(input())

def balak_seq(max_len):
    a, b, c = 1, 1, 1
    for _ in range(max_len):
        yield a
        a, b, c = b, c, a + b + c  

for num in balak_seq(N):
    print(num, end=' ')


# Подвиг 3. На вход программе подается натуральное число N (N > 8). Необходимо его прочитать и объявить функцию-генератор, которая бы выдавала пароль длиной N символов из случайных букв, цифр и некоторых других знаков. Значение N передается в функцию-генератор первым аргументом. Для получения последовательности допустимых символов для генерации паролей в программе импортированы две строки: ascii_lowercase, ascii_uppercase (см. листинг ниже), на основе которых формируется общий список:
# from string import ascii_lowercase, ascii_uppercase
# chars = ascii_lowercase + ascii_uppercase + "0123456789!?@#$*"             
# Функция-генератор должна при каждом вызове возвращать новый пароль из случайно выбранных символов chars длиной N и делать это бесконечно, то есть, вызывать ее можно бесконечное число раз.
# Сгенерируйте с помощью функции-генератора первые пять паролей и выведите их в столбик (каждый с новой строки).
# Подсказка: сгенерировать случайный индекс indx в диапазоне [a; b] для выбора символа из chars можно с помощью функции randint модуля random:
# import random
# random.seed(1)
# indx = random.randint(a, b)
# Sample Input:
# 10
# Sample Output:
# riGp?58WAm
# !dX3a5IDnO
# dcdbWB2d*C
# 4?DSDC6Lc1
# mxLpQ@2@yM

import random
from string import ascii_lowercase, ascii_uppercase
random.seed(1)

N = int(input())
chars = ascii_lowercase + ascii_uppercase + "0123456789!?@#$*"

def password_gen(length):
    while True:
        password = ''
        for _ in range(length):
            indx = random.randint(0, len(chars) - 1)
            password += chars[indx]
        yield password
    

gen3 = password_gen(N)
for _ in range(5):
    print(next(gen3))


# Подвиг 4. На вход программе подается натуральное число N, которое необходимо прочитать и сохранить через переменную. Используя строки из латинских букв ascii_lowercase и ascii_uppercase:
# from string import ascii_lowercase, ascii_uppercase
# chars = ascii_lowercase + ascii_uppercase        
# объявите функцию-генератор с одним параметром max_size, которая бы возвращала случайно сформированные email-адреса с доменом mail.ru и длиной max_size = N символов. Например, при N=6 адрес может выглядеть так: SCrUZo@mail.ru
# Функция-генератор должна возвращать бесконечное число таких адресов, то есть, генерировать постоянно. Выведите первые пять сгенерированных email и выведите их в столбик (каждый с новой строки).
# Подсказка: для формирования случайного индекса для выбора символа из строки chars, используйте функцию randint модуля random:
# import random
# random.seed(1)
# indx = random.randint(0, len(chars)-1)
# Sample Input:
# 8
# Sample Output:
# iKZWeqhF@mail.ru
# WCEPyYng@mail.ru
# FbyBMWXa@mail.ru
# SCrUZoLg@mail.ru
# ubbbPIay@mail.ru

import random
random.seed(1)

N = int(input())
chars = ascii_lowercase + ascii_uppercase

def email_gen(length):
    while True:
        email = ''
        for _ in range(length):
            indx = random.randint(0, len(chars) - 1)
            email += chars[indx]
        yield email + '@mail.ru'

gen4 = email_gen(N)
for _ in range(5):
    print(next(gen4))


# Подвиг 5. Объявите функцию-генератор, которая бы возвращала простые числа. (Простое число - это натуральное число, которое делится только на себя и на 1). Выведите с помощью этой функции первые 20 простых чисел (начиная с 2) в одну строчку через пробел.

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def prime_gen():
    num = 2
    while True:
        if is_prime(num):
            yield num
        num += 1

gen5 = prime_gen()
print(*(next(gen5) for _ in range(20)))

