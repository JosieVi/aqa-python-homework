# TODO: 7.4 Именованные аргументы. Фактические и формальные параметры

# Подвиг 2. Объявите в программе функцию с именем get_rect_value, которая первыми двумя параметрами принимает длину и ширину прямоугольника (числа), а третий формальный параметр tp имеет начальное значение 0. Если параметр tp равен нулю, то функция должна возвращать периметр прямоугольника, вычисленного на основе первых двух переданных аргументов, а иначе его площадь.
# P. S. Вызывать функцию не нужно, только объявить.

def get_rect_value(length, width, tp=0):
    if tp == 0:
        return 2 * (length + width)
    else:
        return length * width
    

# Подвиг 3. Объявите в программе функцию с именем check_password, которая первым параметром принимает строку (пароль) и имеет второй формальный параметр chars с начальным значением в виде строки "$%!?@#". Функция должна проверять, есть ли в пароле хотя бы один символ из chars и что длина пароля не менее 8 символов. Если проверка проходит, то функция возвращает булево True, иначе False.
# P. S. Вызывать функцию не нужно, только объявить.
# Sample Input:
# 12345678!
# Sample Output:
# True

def check_password(password, chars="$%!?@#"):
    if len(password) >= 8 and any(c in chars for c in password):
        return True
    else:
        return False
    

# Подвиг 4. Объявите в программе функцию, которая первым параметром принимает строку (с кириллицей и латиницей) и преобразовывает в ней кириллические символы в латиницу, используя следующий словарь для замены русских букв на соответствующее латинское написание:
# t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}                
# Функция должна возвращать результат преобразования переданной строки в латиницу. Замены делать без учета регистра (исходную строку вначале следует перевести в нижний регистр - малые буквы).
# Второй формальный параметр функции с именем sep и начальным значением в виде строки "-". Он определяет символ для замены пробелов в строке.
# На вход программе подается строка, которую необходимо прочитать (после объявления функции). Затем, дважды вызовите функцию (с выводом результата ее работы на экран):
# первый раз только с прочитанной строкой;
# второй раз с прочитанной строкой и именованным аргументом sep со значением '+'.
# Sample Input:
# Лучший курс по Python!
# Sample Output:
# luchshiy-kurs-po-python!
# luchshiy+kurs+po+python!

t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}

def to_latin(s, sep='-'):
    s = s.lower()
    for key, value in t.items():
        s = s.replace(key, value)
    s = s.replace(' ', sep)
    return s

input_string = input()

print(to_latin(input_string))
print(to_latin(input_string, sep='+'))


# Подвиг 5. Объявите в программе функцию, которая первым параметром принимает строку, а второй формальный параметр tag  с начальным значением в виде строки "h1" определяет тег, в который должна заключаться первая переданная строка. Например, мы передаем строку "Hello Python" и заключаем в тег "h1". Функция должна вернуть строку (без кавычек):
# "<h1>Hello Python</h1>"
# То есть, сначала открывается тег <h1>, а в конце строки - закрывается </h1>. И так для любых указанных тегов.
# После объявления функции далее в программе прочитайте из входного потока строку и дважды вызовите функцию (с выводом результата ее работы на экран):
# первый раз только со строкой;
# второй раз со строкой и именованным аргументом tag со значением 'div'.
# Sample Input:
# Работаем с функциями
# Sample Output:
# <h1>Работаем с функциями</h1>
# <div>Работаем с функциями</div>

def wrap_tag(s, tag='h1'):
    return f"<{tag}>{s}</{tag}>"

input_string = input()

print(wrap_tag(input_string))
print(wrap_tag(input_string, tag='div'))


# Подвиг 6. В функцию из предыдущего подвига 5 добавьте в конец еще один третий формальный параметр up с начальным булевым значением True. Если параметр up равен True, то тег, указанный в формальном параметре tag, следует записывать заглавными буквами, а иначе малыми.
# После объявления функции далее в программе прочитайте из входного потока строку и дважды вызовите функцию (с выводом результата ее работы на экран):
# первый раз со строкой и именованным аргументом tag со значением 'div';
# второй раз со строкой, именованным аргументом tag со значением 'div' и именованным аргументом up со значением False.
# Sample Input:
# Python is the best!
# Sample Output:
# <DIV>Python is the best!</DIV>
# <div>Python is the best!</div>

def wrap_tag2(s, tag='h1', up=True):
    if up:
        tag = tag.upper()
    else:
        tag = tag.lower()
    return f"<{tag}>{s}</{tag}>"

input_string = input()

print(wrap_tag2(input_string, tag='div'))
print(wrap_tag2(input_string, tag='div', up=False))