# TODO: 7.1 Что такое функции. Их объявление и вызов

# Подвиг 3. Объявите в программе функцию, которая не имеет параметров и просто выводит на экран следующую строку:
# It's my first function
# После объявления вызовите эту функцию.

def print_message():
    print("It's my first function")

print_message()


# Подвиг 4. Объявите в программе функцию без параметров, которая читает из входного потока (с клавиатуры) имя и фамилию, записанные в одну строку через пробел, и выводит на экран сообщение (без кавычек):
# "Уважаемый, <имя> <фамилия>! Вы верно выполнили это задание!"
# После объявления вызовите эту функцию.
# Sample Input:
# Сергей Балакирев
# Sample Output:
# Уважаемый, Сергей Балакирев! Вы верно выполнили это задание!

def greet_user():
    full_name = input()
    print(f"Уважаемый, {full_name}! Вы верно выполнили это задание!")

greet_user()


# Подвиг 5. Объявите в программе функцию, которая имеет один параметр - вес предмета, и выводит на экран сообщение (без кавычек):
# "Предмет имеет вес: x кг."
# где x - переданное значение (аргумент) функции. После объявления функции прочитайте (с помощью функции input) вещественное число и вызовите функцию с этим числовым значением.
# Sample Input:
# 12.67
# Sample Output:
# Предмет имеет вес: 12.67 кг.

def print_weight(weight):
    print(f"Предмет имеет вес: {weight} кг.")

weight_value = float(input())
print_weight(weight_value)


# Подвиг 6. Объявите в программе функцию, которая в качестве параметра принимает список (list), находит максимальное, минимальное и сумму значений этого списка и выводит результат на экран в виде строки (без кавычек):
# "Min = v_min, max = v_max, sum = v_sum"
# где v_min, v_max, v_sum - вычисленные значения минимального, максимального и суммы значений списка.
# После объявления функции прочитайте (с помощью функции input) список целых чисел, записанных в одну строку через пробел, и вызовите функцию с передачей ей этого списка.
# Sample Input:
# 8 11 5 -10 12 0
# Sample Output:
# Min = -10, max = 12, sum = 26

def analyze_list(numbers):
    v_min = min(numbers)
    v_max = max(numbers)
    v_sum = sum(numbers)
    print(f"Min = {v_min}, max = {v_max}, sum = {v_sum}")

input_list = list(map(int, input().split()))
analyze_list(input_list)


# Подвиг 7. Объявите в программе функцию с двумя параметрами width и height (ширина и высота прямоугольника), которая выводит сообщение (без кавычек):
# "Периметр прямоугольника, равен x"
# где x - вычисленный периметр прямоугольника. После объявления функции прочитайте (с помощью функции input) два целых числа, записанных в одну строку через пробел, и вызовите функцию с этими числовыми значениями.
# Sample Input:
# 8 11
# Sample Output:
# Периметр прямоугольника, равен 38

def print_perimeter(width, height):
    perimeter = 2 * (width + height)
    print(f"Периметр прямоугольника, равен {perimeter}")

w, h = map(int, input().split())
print_perimeter(w, h)


# Подвиг 8. Объявите в программе функцию с одним параметром, которая проверяет корректность переданного ей email-адреса в виде строки. Полагается, что адрес верен, если он обязательно содержит символы '@' и '.', а все остальные символы могут принимать значения: 'a-z', 'A-Z', '0-9' и '_'. Если email верен, то функция выводит "ДА", иначе "НЕТ".
# После объявления функции прочитайте (с помощью функции input) строку с email-адресом и вызовите функцию с этим аргументом.
# Sample Input:
# sc_lib@list.ru
# Sample Output:
# ДА

def validate_email(email):
    allowed_chars = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_@.")
    if '@' in email and '.' in email and all(char in allowed_chars for char in email):
        print("ДА")
    else:
        print("НЕТ")

email_input = input()
validate_email(email_input)